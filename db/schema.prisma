// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  @@map(name: "users")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map(name: "sessions")
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
  @@map(name: "tokens")
}

model Item {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  price     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tags      TagOnItem[]

  @@map(name: "items")
}

model ItemImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "item_images")
}

model Tag {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     TagOnItem[]

  @@map(name: "tags")
}

model TagOnItem {
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String   @db.Uuid
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @db.Uuid
  assignedAt DateTime @default(now())

  @@id([itemId, tagId])
  @@map(name: "tags_on_items")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
